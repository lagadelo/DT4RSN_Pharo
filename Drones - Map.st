Object subclass: #MainMap	instanceVariableNames: 'layers'	classVariableNames: ''	package: 'Drones - Map'!Object subclass: #Map	instanceVariableNames: 'data position angle'	classVariableNames: ''	package: 'Drones - Map'!!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 10:22'!data: aData	data := aData! !!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 11:17'!angle: anObject	angle := anObject! !!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 10:23'!position: aPosition  	position := aPosition ! !!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 11:17'!angle		angle ifNil:[self initializeAngle].	^ angle! !!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 10:22'!data	^data! !!Map methodsFor: 'accessing' stamp: 'LoicLagadec 3/7/2025 10:23'!position  	^position  ! !!Map methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 10:26'!capture	^self subclassResponsibility ! !Map subclass: #AerialView	instanceVariableNames: ''	classVariableNames: ''	package: 'Drones - Map'!Object subclass: #MapLayer	instanceVariableNames: 'data name boundingBox'	classVariableNames: ''	package: 'Drones - Map'!!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!data: anObject	data := anObject! !!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!boundingBox: anObject	boundingBox := anObject! !!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!boundingBox	^ boundingBox! !!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!name	^ name! !!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!name: anObject	name := anObject! !!MapLayer methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 10:13'!data	^ data! !!MapLayer methodsFor: 'drawing' stamp: 'LoicLagadec 3/6/2025 10:19'!drawWithin: aRectange! !!MapLayer methodsFor: 'drawing' stamp: 'LoicLagadec 3/6/2025 10:21'!draw| semanticLayer window |window:= 0@0 extent: 600@400.semanticLayer :=self drawWithin: self boundingBox. "extract meaningfull data"semanticLayer size: window. "set up graphical counterpart (needs zoom, offset)"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!MapLayer class	instanceVariableNames: ''!!MapLayer class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/6/2025 10:43'!data: someData^self new data: someData! !MapLayer subclass: #BackgroudMap	instanceVariableNames: 'bottomPosition cornerPosition'	classVariableNames: ''	package: 'Drones - Map'!!BackgroudMap methodsFor: 'drawing' stamp: 'LoicLagadec 3/6/2025 10:09'!draw^self data! !MapLayer subclass: #FleetMap	instanceVariableNames: ''	classVariableNames: ''	package: 'Drones - Map'!!FleetMap methodsFor: 'drawing' stamp: 'LoicLagadec 3/6/2025 10:36'!drawWithIn:  aBoundingBox | allElements allEments consideredElements |allElements := self data flattens.allElements do:[:aDrone| aDrone process: #gps]. "Might suppose lazy synchronization"consideredElements := allEments select:[:element| element within: aBoundingBox].consideredElements  do:[:aDrone| aDrone process:#camera].! !!FleetMap methodsFor: 'drawing' stamp: 'LoicLagadec 3/6/2025 10:11'!draw! !MapLayer subclass: #MissionMap	instanceVariableNames: ''	classVariableNames: ''	package: 'Drones - Map'!Object subclass: #OSMapGetter	instanceVariableNames: 'zoom url tile point map'	classVariableNames: ''	package: 'Drones - Map'!!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 2/17/2025 10:59'!getImage	"Default format is PNG"	^self getPng ! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 3/24/2025 15:59'!getCenteredImage	"This method return a centered image. This requires to get four images, split then into parts, 4 of which to be further re-assembled"		|xRange yRange  position wideImage  |		self computePosition.		xRange :=self point x < 128 ifTrue:[  #(-1 0)] ifFalse:[ #(0 1)].	yRange :=self point y < 128 ifTrue:[   #(-1 0)] ifFalse:[ #(0 1)].	wideImage := ImageForm newFrom:(Form extent: (2@2) * self defaultImageSize  depth:16).	xRange keysAndValuesDo:  [:xIndex :aX|		yRange  keysAndValuesDo:  [:yIndex :aY|			|subImage|			"Get one partial image"			subImage := ImageForm newFrom:((self getPng: self tile +(aX@aY))asFormOfDepth: 16).			"Display the image"			subImage displayOn: wideImage at: (xIndex@yIndex - 1) * self defaultImageSize]].		"Crop to extract the centered subImage"	position := point rounded - (self defaultImageSize/2).		^wideImage crop:  (position x - (self defaultImageSize *xRange first)) @ (position y - (self defaultImageSize *yRange first))  h:self defaultImageSize  w:self defaultImageSize   ! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 2/17/2025 10:58'!getJpeg	^self error:'Currently not supported'	"^ZnEasy getJpeg: self url,'.jpeg'"! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 3/24/2025 16:12'!getPng: aTile"Acts as Proxy"| filename img    |self computePosition.filename := 'tiles/',self zoom printString,'/',self zoom printString,'_', aTile x printString,'_',aTile y printString,'.png'.(File exists: filename) ifTrue:[img := ImageReadWriter formFromFileNamed:filename .	 ]	ifFalse:[img := self getPngFromUrl: (self getUrlForTile:  aTile).		PNGReadWriter putForm: img onFileNamed:   filename.].^img 		  ! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 2/17/2025 10:58'!getPngFromUrl: anUrl	"Assumes URL has been properly precomputed"		^ZnEasy getPng: anUrl,'.png'.! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 3/24/2025 15:57'!getPngself computePosition.^self getPng: tile ! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 3/2/2025 05:00'!getPngFromFile: x	"Assumes tile/zoom have been properly precomputed"	^self error:'Not yet implemented'! !!OSMapGetter methodsFor: 'images retrieval' stamp: 'LoicLagadec 2/17/2025 10:58'!getGif	^self error:'Currently not supported'	"^ZnEasy getGif: self url,'.gif'"! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 10:47'!url	url ifNil: [self getUrl] .	^url 	! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 10:31'!zoom: anObject	zoom := anObject! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 10:57'!point"position within the tile (ranging from O to tileSize -1)"	^ point! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 11:59'!tile	^ tile! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 10:31'!zoom	^ zoom! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 10:56'!map	^map! !!OSMapGetter methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 10:56'!map: aMap"aMap is a client"	map := aMap! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/7/2025 10:52'!capture: aMap ^self captureCoarseView:aMap policy:#getImage ! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/7/2025 11:07'!captureFineView: aMap  "eg. policy = #getCenteredImage"map := aMap.zoom := self defaultZoom ceiling.Transcript show: zoom printString ;cr.^self getCenteredImage  ."zoom := zoom +1.finerData := self getCenteredImage .map mergeWith: finerData weigh: self defaultZoom fractionPart"! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/24/2025 16:31'!captureReal: aMap| weight fineSize fineImage |self captureCoarseView: aMap  .weight := self defaultZoom fractionPart..fineSize := "MapGetter defaultImageSize * (2 raisedTo:(1- weight) negated)." 256.fineImage := (self captureFineView: aMap  ) scaledIntoFormOfSize: fineSize. aMap data: (aMap data mergeWith:fineImage weight: 0.1 startingAt: 1@1 * (self defaultImageSize - fineSize)) ! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/7/2025 11:06'!captureCoarseView: aMap  "eg. policy = #getCenteredImage"map := aMap.zoom := self defaultZoom floor.Transcript show: zoom printString ;cr.map data: (self getCenteredImage ) .map adapt: (2 raisedTo: (self defaultZoom fractionPart) negated) ! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/7/2025 11:08'!captureSimplified: aMap	self captureTile: aMap.	map adapt: (2 raisedTo: (self defaultZoom fractionPart) negated) ! !!OSMapGetter methodsFor: 'capture real' stamp: 'LoicLagadec 3/7/2025 11:22'!captureTile: aMapmap := aMap.zoom := self defaultZoom ceiling.Transcript show: zoom printString ;cr.aMap data: self getImage ! !!OSMapGetter methodsFor: 'url' stamp: 'LoicLagadec 2/17/2025 11:06'!computePosition|   x sinLat y pos targetPosition |	targetPosition  := self map position. 	"Normalize longitude, ie compute x"	x :=   targetPosition longitude + 180 / 360 .		"Sin requires degrees to radians conversion"	sinLat := (targetPosition latitude * Float pi /180) sin.		"Compute y"	y := 0.5 - (((1 + sinLat/ (1 - sinLat)) ln) / ( 4*Float pi)).	"The tiling system relies on a grid of 2^^n tiles, with n the zoom factor, ranging from 0 to 19"	pos := (x@y *(2 raisedTo: zoom)).		"Two values to be computed: the tiling indexes, and the position within the tile"	tile := pos floor.	point := (pos - tile) * self defaultImageSize.! !!OSMapGetter methodsFor: 'url' stamp: 'LoicLagadec 2/17/2025 10:59'!getUrl	tile ifNil:[self computePosition].	url := self getUrlForTile: self tile.! !!OSMapGetter methodsFor: 'url' stamp: 'LoicLagadec 2/17/2025 10:59'!getUrlForTile:tileRef   	^ 'https://tile.openstreetmap.org/',zoom printString,'/', tileRef x printString,'/',tileRef y printString . ! !!OSMapGetter methodsFor: 'defaults' stamp: 'LoicLagadec 2/17/2025 11:07'!defaultImageSize	" This comes from the openStreetMap specs. 256*256 images"		^256 ! !!OSMapGetter methodsFor: 'defaults' stamp: 'LoicLagadec 2/17/2025 16:31'!defaultZoom"Stick Map defaultImageSize. Should refactor"	"Considers 2 times sin of haft angle"	|  distance |	distance := 2 * self map position altitude * (self map angle  * Float pi / 360) sin.	^((1700 / distance ) log: 2)  + 14 	"Potential refactoring: use the zoom, keep the franction to crop and expand"! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OSMapGetter class	instanceVariableNames: ''!!OSMapGetter class methodsFor: 'accessing - defaults' stamp: 'LoicLagadec 2/10/2025 19:15'!defaultImageSize^256! !!OSMapGetter class methodsFor: 'conversion' stamp: 'LoicLagadec 2/10/2025 17:32'!meterByPixel: zoom ! !!OSMapGetter class methodsFor: 'conversion' stamp: 'LoicLagadec 2/17/2025 16:20'!coverageWithAltitude: h angle: angle"e.g 100 meters altitude with 120° camera means you capture 346x346 squared meters""self coverageWithAltitude: 100 angle: 120 " 	^h  * (Float pi * angle / 360)   tan  *2 ! !!OSMapGetter class methodsFor: 'conversion' stamp: 'LoicLagadec 2/10/2025 19:17'!altitudeForDistance: d angle: angle"e.g capturing 100*100 meters with a 120° camera means your altitude is  28.87 self distance:100 angle: 120" ^d / (Float pi /360 * angle) tan / 2 ! !!OSMapGetter class methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 11:10'!capture: aMap policy: aSymbol	^aSymbol = #real 		ifTrue:[self new captureReal: aMap ] 		ifFalse: [ self new captureSimplified: aMap ]! !!OSMapGetter class methodsFor: 'capture' stamp: 'LoicLagadec 2/17/2025 16:20'!capture: aMapself new capture: aMap! !!OSMapGetter class methodsFor: 'zoom' stamp: 'LoicLagadec 2/10/2025 19:01'!zoomForAltitude: altitude withAngle: angle^self zoomToShowMeters: (self altitude: altitude angle: angle) usingPixels: 256 "default size" ! !!OSMapGetter class methodsFor: 'zoom' stamp: 'LoicLagadec 2/10/2025 18:07'!zoomToShowMeters: meters usingPixels: pixels "self zoomToShowMeters: 100000 usingPixels: 256 "19 to:1 by: -1  do:[:zoom| (self metersPerPixelWithZoom: zoom) * pixels > meters ifTrue:[^zoom]]! !!OSMapGetter class methodsFor: 'examples' stamp: 'LoicLagadec 2/10/2025 15:31'!example: zoom"Brest, France"^self latitude: 48.380247380573806 longitude: -4.524116460558902 zoom: zoom! !!OSMapGetter class methodsFor: 'examples' stamp: 'LoicLagadec 2/10/2025 18:42'!example ^self example: 12 ! !!OSMapGetter class methodsFor: 'examples' stamp: 'LoicLagadec 2/10/2025 18:42'!example2 "Brest, France, 1 squared kilometer"^self latitude: 48.380247380573806 longitude: -4.524116460558902 area:1000000! !!OSMapGetter class methodsFor: 'resolution' stamp: 'LoicLagadec 2/10/2025 19:16'!pixelsPerMeterWithZoom: zoom^  1/ (self metersPerPixelWithZoom:zoom)! !!OSMapGetter class methodsFor: 'resolution' stamp: 'LoicLagadec 2/10/2025 18:11'!metersPerPixelWithZoom: zoom^  (1700/256) / (2 raisedTo:zoom -14)! !Map subclass: #OSSimplifedMap	instanceVariableNames: ''	classVariableNames: ''	package: 'Drones - Map'!!OSSimplifedMap methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 11:32'!adapt:a! !!OSSimplifedMap methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 10:25'!capture	OSMapGetter capture: self policy:#simplified! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OSSimplifedMap class	instanceVariableNames: ''!!OSSimplifedMap class methodsFor: 'examples' stamp: 'LoicLagadec 3/7/2025 11:11'!example: aSymbol	"self example:#example"		^ self position: (Position perform:aSymbol) angle: 120! !!OSSimplifedMap class methodsFor: 'examples' stamp: 'LoicLagadec 3/7/2025 11:11'!exampleCapture: aSymbol	"self exampleCapture:#example"		^ (self example: aSymbol) capture! !!OSSimplifedMap class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/7/2025 11:12'!position: aPosition  	| tmp |	tmp   := self new. 	tmp position: aPosition.	^ tmp ! !!OSSimplifedMap class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/7/2025 11:12'!position: aPosition angle: anAngle	| tmp |	tmp := self position: aPosition.	tmp angle: anAngle.	^tmp! !OSSimplifedMap subclass: #OSRealMap	instanceVariableNames: 'angle'	classVariableNames: ''	package: 'Drones - Map'!!OSRealMap methodsFor: 'defaults' stamp: 'LoicLagadec 2/17/2025 15:42'!defaultAngle 	^120! !!OSRealMap methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 11:32'!adapt: ratio"Constraints: 0 <ratio< 1""Crop then scale the image"| defaultSize size subImage ratioTest   |	ratioTest := ratio. ratioTest := 0.5.	defaultSize := OSMapGetter  defaultImageSize. 	size    := (defaultSize * ratioTest) floor. 	subImage :=  (data crop: (1@1) * ((defaultSize - size)/2 ) rounded   h: size  w: size ).	data := subImage scaled: defaultSize  height: defaultSize! !!OSRealMap methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 10:25'!capture	OSMapGetter capture: self policy:#real! !!OSRealMap methodsFor: 'intialization' stamp: 'LoicLagadec 2/17/2025 15:41'!initializeAngle	angle := self defaultAngle! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!OSRealMap class	instanceVariableNames: ''!!OSRealMap class methodsFor: 'examples' stamp: 'LoicLagadec 3/7/2025 11:14'!exampleCapture: aSymbol	"self exampleCapture:#example"	^super exampleCapture: aSymbol! !