Object subclass: #DroneSensor	instanceVariableNames: 'behavior host name data'	classVariableNames: ''	package: 'Drones'!!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:48'!behavior: anObject	behavior := anObject! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:48'!host: anObject	host := anObject! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:48'!behavior	^ behavior! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 11:56'!data: aData	data := aData! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:47'!name	^ name! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:47'!name: anObject	name := anObject! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:48'!host	^ host! !!DroneSensor methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:50'!data	^ data! !!DroneSensor methodsFor: 'processing' stamp: 'LoicLagadec 2/17/2025 16:20'!process   (self behavior value: self) ! !!DroneSensor methodsFor: 'processing' stamp: 'LoicLagadec 3/2/2025 04:55'!canProcess: aSymbol^self abilities includes: aSymbol! !!DroneSensor methodsFor: 'testing' stamp: 'LoicLagadec 3/2/2025 04:52'!abilities"Provide a lst of abilities. Used by the drone to identify which sensor to activate"^self subclassResponsibility ! !!DroneSensor methodsFor: 'notification' stamp: 'LoicLagadec 2/10/2025 18:48'!notify:eventself host notify:event from: self! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DroneSensor class	instanceVariableNames: ''!!DroneSensor class methodsFor: 'instance creation' stamp: 'LoicLagadec 2/10/2025 18:52'!new^self subclassResponsibility! !DroneSensor subclass: #DroneCamera	instanceVariableNames: 'angle resolution'	classVariableNames: ''	package: 'Drones'!!DroneCamera methodsFor: 'capture' stamp: 'LoicLagadec 3/7/2025 10:20'!capture 	| map |	map := OSRealMap new.	map  position: self host position.	map angle: self angle.	data := 	map  capture! !!DroneCamera methodsFor: 'initialization' stamp: 'LoicLagadec 2/17/2025 11:43'!initialize "Assume 1920*1080 dimension for 12M leads to 5,78 factor. Apply to squared images: 6250*6250"resolution :=  6250.angle := 120! !!DroneCamera methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 11:44'!resolution	^ resolution! !!DroneCamera methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:57'!angle: anObject	angle := anObject! !!DroneCamera methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:57'!angle	^ angle! !!DroneCamera methodsFor: 'accessing' stamp: 'LoicLagadec 2/17/2025 11:44'!resolution: anObject	resolution := anObject! !!DroneCamera methodsFor: 'testing' stamp: 'LoicLagadec 3/7/2025 10:20'!abilities 	^#OSRealMap! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!DroneCamera class	instanceVariableNames: ''!!DroneCamera class methodsFor: 'default model values' stamp: 'LoicLagadec 3/24/2025 14:50'!defaultBehavior"copy position to keep accurate metadata"	^ [:s| s data: (OSSimplifedMap position: s host position copy angle: s angle ) capture ]! !!DroneCamera class methodsFor: 'default model values' stamp: 'LoicLagadec 3/24/2025 15:49'!fullmapBehavior"copy position to keep accurate metadata"	^ [:s| s data: (OSRealMap position: s host position copy angle: s angle ) capture ]! !!DroneCamera class methodsFor: 'examples' stamp: 'LoicLagadec 2/17/2025 11:55'!example| tmp |	tmp := self new. 	tmp angle: 120.	tmp resolution: 12000000/ 1920. "Assume squared images for 1920*1080 images of 12M"	^ tmp  ! !!DroneCamera class methodsFor: 'instance creation' stamp: 'LoicLagadec 2/17/2025 11:55'!new	| tmp |	tmp := self basicNew initialize.	tmp behavior: self defaultBehavior; name: #camera.	^tmp ! !Object subclass: #Element	instanceVariableNames: 'id'	classVariableNames: ''	package: 'Drones'!!Element commentStamp: 'LoicLagadec 3/6/2025 09:53' prior: 0!This class implements a Composite DP!!Element methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 09:47'!id	^ id! !!Element methodsFor: 'accessing' stamp: 'LoicLagadec 3/6/2025 09:47'!id: anObject	id := anObject! !!Element methodsFor: 'flattening' stamp: 'LoicLagadec 3/6/2025 10:31'!flattensInto: aStream	^self subclassResponsibility! !!Element methodsFor: 'flattening' stamp: 'LoicLagadec 3/6/2025 10:32'!flattens	| aStream |	aStream := ReadWriteStream new.	self flattensInto: aStream.	^	aStream contents	 ! !!Element methodsFor: 'testing' stamp: 'LoicLagadec 3/6/2025 10:37'!within: aBoundingBox	^self subclassResponsibility! !Element subclass: #Drone	instanceVariableNames: 'position sensors'	classVariableNames: ''	package: 'Drones'!!Drone methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:44'!position	^ position! !!Drone methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:44'!position: anObject	position := anObject! !!Drone methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:44'!sensors	^ sensors! !!Drone methodsFor: 'accessing' stamp: 'LoicLagadec 2/10/2025 18:44'!sensors: anObject	sensors := anObject! !!Drone methodsFor: 'initialization' stamp: 'LoicLagadec 2/17/2025 16:36'!initialize 	sensors := Dictionary new! !!Drone methodsFor: 'testing' stamp: 'LoicLagadec 3/6/2025 10:41'!within: aBoundingBox	"^aBoundingBox includes:   self position"	^true! !!Drone methodsFor: 'building' stamp: 'LoicLagadec 2/17/2025 16:37'!attach: aSensor 	sensors add: aSensor name -> aSensor.	aSensor host: self.! !!Drone methodsFor: 'flattening' stamp: 'LoicLagadec 3/6/2025 10:30'!flattenInto: aStream	aStream nextPut: self! !!Drone methodsFor: 'processing' stamp: 'LoicLagadec 2/17/2025 16:39'!process 	self sensors valuesDo:[:aSensor| aSensor process]! !!Drone methodsFor: 'processing' stamp: 'LoicLagadec 3/7/2025 11:44'!processSensor: aSensor	aSensor ifNotNil: [aSensor process] ifNil:[nil] ! !!Drone methodsFor: 'processing' stamp: 'LoicLagadec 3/24/2025 13:18'!processSensorNamed: aSensorName ^self processSensor: (self sensorNamed: aSensorName)! !!Drone methodsFor: 'processing' stamp: 'LoicLagadec 3/24/2025 13:17'!sensorNamed: aSensorName^(sensors at: aSensorName ifAbsent:[])  ! !!Drone methodsFor: 'choosing' stamp: 'LoicLagadec 3/2/2025 04:56'!need: aSymbol^self sensors select:[:s| s canProcess: aSymbol]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Drone class	instanceVariableNames: ''!!Drone class methodsFor: 'examples' stamp: 'LoicLagadec 2/17/2025 16:19'!example| tmp |	tmp := self new initialize.	tmp position: Position example.	tmp attach: DroneCamera new.^tmp ! !!Drone class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/6/2025 09:50'!position: aPosition^self new position:aPosition; yourself! !Element subclass: #Fleet	instanceVariableNames: 'elements'	classVariableNames: ''	package: 'Drones'!!Fleet methodsFor: 'managing elements groups' stamp: 'LoicLagadec 3/6/2025 09:46'!removeElement: anElementelements remove: anElement! !!Fleet methodsFor: 'managing elements groups' stamp: 'LoicLagadec 3/6/2025 09:46'!addElement: anElementelements add: anElement! !!Fleet methodsFor: 'initializing' stamp: 'LoicLagadec 3/6/2025 09:45'!initialize super initialize.elements := OrderedCollection new.! !!Fleet methodsFor: 'flattening' stamp: 'LoicLagadec 3/6/2025 10:30'!flattensInto: aStream	elements do:  [ :anElement| anElement flattensInto: aStream. ]! !!Fleet methodsFor: 'flattening' stamp: 'LoicLagadec 3/7/2025 11:39'!allElementsPerform: aSymbol withBloc: aBloc^elements perform: aSymbol withArguments: (Array with: aBloc)! !!Fleet methodsFor: 'flattening' stamp: 'LoicLagadec 3/7/2025 11:40'!allElementsDo: aBloc	"this is a facility for illustration purposes"	^self allElementsPerform: #do withBloc: aBloc! !!Fleet methodsFor: 'testing' stamp: 'LoicLagadec 3/6/2025 10:40'!within: aBoundingBox	^self shouldBeImplemented ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Fleet class	instanceVariableNames: ''!!Fleet class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/6/2025 09:52'!elements: aCollection| fleet |fleet := self new.aCollection do:[:anElement| fleet addElement: anElement].^fleet ! !DroneSensor subclass: #GPSSensor	instanceVariableNames: 'position'	classVariableNames: ''	package: 'Drones'!!GPSSensor methodsFor: 'testing' stamp: 'LoicLagadec 3/2/2025 04:53'!abilities 	^(#Position)! !!GPSSensor methodsFor: 'accessing' stamp: 'LoicLagadec 3/2/2025 04:49'!position	^ position! !!GPSSensor methodsFor: 'accessing' stamp: 'LoicLagadec 3/2/2025 04:49'!position: anObject	position := anObject! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GPSSensor class	instanceVariableNames: ''!!GPSSensor class methodsFor: 'default model values' stamp: 'LoicLagadec 3/2/2025 04:49'!defaultBehavior"Update drone perceived position"	^[:s | s host position: s position]! !!GPSSensor class methodsFor: 'instance creation' stamp: 'LoicLagadec 3/6/2025 10:00'!new	| tmp |	tmp := self basicNew initialize.	tmp behavior: self defaultBehavior; name: #gps.	^tmp ! !