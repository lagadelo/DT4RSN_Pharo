SUnitTest subclass: #DronesTest	instanceVariableNames: ''	classVariableNames: ''	package: 'Drones - Testing'!!DronesTest methodsFor: 'tests' stamp: 'LoicLagadec 3/25/2025 15:46'!testSensor	| drone |	drone := Drone   position: Position example.	drone sensors isEmpty   ifFalse:[^false].	drone attach: DroneCamera new.	drone sensors size = 1 ifFalse:[^false]. 		^true! !!DronesTest methodsFor: 'tests' stamp: 'LoicLagadec 3/25/2025 15:58'!testCreation	| drone |	drone := Drone   position: Position example.	^drone isKindOf:Drone ! !!DronesTest methodsFor: 'tests' stamp: 'LoicLagadec 3/25/2025 15:47'!testSensorName	| drone |	drone := Drone   position: Position example.	drone attach: DroneCamera new.	drone sensors size = 1 ifFalse:[^false].	(drone sensorNamed: #camera)ifNil:[^false].	(drone sensorNamed: #camera) host == drone ifFalse:[^false].		^true! !!DronesTest methodsFor: 'tests' stamp: 'LoicLagadec 3/25/2025 15:51'!testSensorNameUnicity	| drone |	drone := Drone   position: Position example.	drone attach: DroneCamera new. 	self should: [drone attach: DroneCamera new] raise: Error .	^true ! !!DronesTest methodsFor: 'tests' stamp: 'LoicLagadec 3/25/2025 16:03'!testFleet	| drone1 drone2 fleet |	drone1 := Drone   position: Position example.	drone1 attach: DroneCamera new.	drone2 := Drone   position: Position example3.	drone2 attach: DroneCamera new. 	drone2 attach: GPSSensor   new.	fleet := Fleet elements: (Array with: drone1 with: drone2).	(fleet isKindOf: Fleet) ifFalse:[^false].	(fleet flattens size = 2) ifFalse:[^false].	fleet flattens   first == drone1 ifFalse:[^false].	fleet flattens   last == drone2 ifFalse:[^false].	^true	! !